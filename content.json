{"meta":{"title":"The best of ideallove","subtitle":"桐谷の宅次元","description":"","author":"桐谷コナン","url":"http://www.idealx.cn","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-05-07T13:19:42.411Z","updated":"2020-03-18T10:22:14.000Z","comments":true,"path":"404.html","permalink":"http://www.idealx.cn/404.html","excerpt":"","text":"**404 Not Found** 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除 **也有可能是博文的链接发生了变化** 回到博客首页"},{"title":"所有分类","date":"2020-12-11T04:17:19.052Z","updated":"2020-02-21T07:05:30.000Z","comments":true,"path":"categories/index.html","permalink":"http://www.idealx.cn/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-12-11T04:17:13.384Z","updated":"2020-02-21T11:42:21.000Z","comments":true,"path":"about/index.html","permalink":"http://www.idealx.cn/about/index.html","excerpt":"","text":"资料正在准备中"},{"title":"","date":"2020-05-07T13:19:42.414Z","updated":"2020-02-21T07:06:44.000Z","comments":true,"path":"mylist/index.html","permalink":"http://www.idealx.cn/mylist/index.html","excerpt":"","text":""},{"title":"友人帐","date":"2020-05-07T13:19:42.413Z","updated":"2020-03-17T07:29:34.000Z","comments":true,"path":"friends/index.html","permalink":"http://www.idealx.cn/friends/index.html","excerpt":"","text":""},{"title":"projects","date":"2020-02-21T07:21:05.000Z","updated":"2020-02-21T07:21:05.000Z","comments":true,"path":"projects/index.html","permalink":"http://www.idealx.cn/projects/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-07T13:19:42.415Z","updated":"2020-02-23T15:32:04.000Z","comments":true,"path":"share/index.html","permalink":"http://www.idealx.cn/share/index.html","excerpt":"","text":"新的小玩意儿，资料正在准备中"},{"title":"所有标签","date":"2020-05-07T13:19:42.415Z","updated":"2020-02-21T07:06:03.000Z","comments":true,"path":"tags/index.html","permalink":"http://www.idealx.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Re:从零开始的思科模拟器之DHCP配置","slug":"12-cisco-02","date":"2020-05-07T02:00:00.000Z","updated":"2020-12-11T05:39:50.708Z","comments":true,"path":"/cisco/02.html","link":"","permalink":"http://www.idealx.cn/cisco/02.html","excerpt":"","text":"本文还需要优化，这里仅给出几个案例 思科模拟器 之 DHCP服务配置 由于网络的流行和广泛使用，在企业或学校都需要配置DHCP服务器，这样可以使无论在哪的电脑，只要连上局域网，就可以通过“自动获取IP地址“方式来自动获取IP地址网关，这样可以节约网络成本，网络资源。 注意：本文不太适合新手直接阅读，请配合思科官方文档观看。 本文使用的模拟器为 Cisco Packet Tracer 6.2 Student Version 一、基于路由器和服务器的DHCP配置（无VLAN划分）拓扑图： 配置路由器Router0： 12345678910Router&gt;enRouter#conf tRouter(config)#hostname R1R1(config)#int f0&#x2F;0 &#x2F;&#x2F;进入端口f0&#x2F;0R1(config-if)#ip address 192.168.1.1 255.255.255.0 &#x2F;&#x2F;配置IPR1(config-if)#no shutdown &#x2F;&#x2F;打开端口R1(config-if)#int f0&#x2F;1R1(config-if)#ip address 192.168.2.1 255.255.255.0R1(config-if)#ip helper-address 192.168.1.2 &#x2F;&#x2F;使该端口上的IP使用DHCP分配R1(config-if)#no shutdown DHCP-Server 的 IP配置： 在虚拟服务器的**Service选项卡中选择DHCP 服务**：修改配置：默认网关：为需要DHCP的网段设置一个DNS服务器开始IP地址：可以自由选择设置子网掩码：这里以 /24 的子网掩码为例最大连接数：以 /24 的子网掩码为例，255-2=253 个地址留给主机TFTP服务器：不需要使用，则无需修改 PC运行结果： 二、基于单臂路由和服务器的DHCP配置（划分VLAN）拓扑图： 二层交换机配置： 1234567891011121314Switch&gt;enSwitch#conf tEnter configuration commands, one per line. End with CNTL&#x2F;Z.Switch(config)#hostname SW1SW1(config)#vlan 10SW1(config-vlan)#vlan 20SW1(config-vlan)#int f0&#x2F;1SW1(config-if)#switchport mode accessSW1(config-if)#switchport access vlan 10SW1(config-if)#int f0&#x2F;2SW1(config-if)#switchport mode accessSW1(config-if)#switchport access vlan 20SW1(config-if)#int f0&#x2F;24SW1(config-if)#switchport mode trunk 路由器配置： 12345678910Router&gt;enRouter#conf tRouter(config)#int f0&#x2F;0Router(config-if)#no shutdown &#x2F;&#x2F;打开端口Router(config-if)#int f0&#x2F;0.1 &#x2F;&#x2F;进入子端口Router(config-subif)#encapsulation dot1Q 10 &#x2F;&#x2F;封装数据Router(config-subif)#ip address 192.168.1.1 255.255.255.0 &#x2F;&#x2F;设置IPRouter(config-subif)#int f0&#x2F;0.2 &#x2F;&#x2F;同上Router(config-subif)#encapsulation dot1Q 20 &#x2F;&#x2F;封装数据Router(config-subif)#ip address 192.168.2.1 255.255.255.0 接着，配置服务器侧的端口 1234567Router(config)#int f0&#x2F;1Router(config-if)#no shutdownRouter(config-if)#ip address 192.168.3.1 255.255.255.0Router(config-if)#int f0&#x2F;0.1 &#x2F;&#x2F;进入刚刚的子端口Router(config-subif)#ip helper-address 192.168.3.2 &#x2F;&#x2F;配置DHCPRouter(config-subif)#int f0&#x2F;0.2 &#x2F;&#x2F;同上Router(config-subif)#ip helper-address 192.168.3.2 服务器配置： PC获取DHCP结果： 三、基于三层交换机和路由器的DHCP配置（划分VLAN）拓扑图： 配置二层交换机： 12345678910111213Switch&gt;enSwitch#conf tSwitch(config)#hostname SW1SW1(config)#vlan 10SW1(config-vlan)#vlan 20SW1(config-vlan)#int f0&#x2F;1SW1(config-if)#switchport mode accessSW1(config-if)#switchport access vlan 10SW1(config-if)#int f0&#x2F;2SW1(config-if)#switchport mode accessSW1(config-if)#switchport access vlan 20SW1(config-if)#int f0&#x2F;24SW1(config-if)#switchport mode trunk 配置三层交换机： 123456789101112131415Switch&gt;Switch&gt;enSwitch#conf tSwitch(config)#hostname MSW1MSW1(config)#vlan 10MSW1(config-vlan)#vlan 20MSW1(config-vlan)#int vlan 10MSW1(config-if)#ip address 192.168.1.1 255.255.255.0MSW1(config-if)#int vlan 20MSW1(config-if)#ip address 192.168.2.1 255.255.255.0MSW1(config-if)#int f0&#x2F;1MSW1(config-if)#no switchportMSW1(config-if)#ip address 192.168.3.1 255.255.255.0MSW1(config-if)#exMSW1(config)#ip routing 到这里 三层交换机还有一个中继没有配，先配置路由器。配置路由器： 1234567891011121314151617181920Router&gt;enRouter#conf tRouter(config)#int f0&#x2F;0Router(config-if)#no shutdownRouter(config-if)#int f0&#x2F;0Router(config-if)#ip address 192.168.3.2 255.255.255.0Router(config-if)#exRouter(config)#ip route 0.0.0.0 0.0.0.0 192.168.3.1Router(config)#ip dhcp pool vlan10Router(dhcp-config)#network 192.168.1.0 255.255.255.0Router(dhcp-config)#dns-server 114.114.114.114Router(dhcp-config)#default-router 192.168.1.1Router(dhcp-config)#exRouter(config)#ip dhcp excluded-address 192.168.1.1Router(config)#ip dhcp pool vlan20Router(dhcp-config)#default-router 192.168.2.1Router(dhcp-config)#dns-server 114.114.114.114Router(dhcp-config)#network 192.168.2.0 255.255.255.0Router(dhcp-config)#exRouter(config)#ip dhcp excluded-address 192.168.2.1 返回三层交换机配置： 1234567MSW1&gt;enMSW1#conf tMSW1(config)#int vlan 10MSW1(config-if)#ip helper-address 192.168.3.2MSW1(config-if)#int vlan 20MSW1(config-if)#ip helper-address 192.168.3.2MSW1(config-if)#ex PC获取DHCP结果： 后记第三种方法 也可把路由器换成服务器，服务器配置几乎一致。 如果有不正确的地方欢迎大佬们指正，有更好的方法欢迎大佬们指教。 我真的下饭。","categories":[{"name":"网络","slug":"网络","permalink":"http://www.idealx.cn/categories/%E7%BD%91%E7%BB%9C/"},{"name":"基础学习","slug":"网络/基础学习","permalink":"http://www.idealx.cn/categories/%E7%BD%91%E7%BB%9C/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"思科模拟器","slug":"思科模拟器","permalink":"http://www.idealx.cn/tags/%E6%80%9D%E7%A7%91%E6%A8%A1%E6%8B%9F%E5%99%A8/"},{"name":"cisco","slug":"cisco","permalink":"http://www.idealx.cn/tags/cisco/"},{"name":"网络基础","slug":"网络基础","permalink":"http://www.idealx.cn/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"}]},{"title":"Re:从零开始的Python3学习笔记 06","slug":"11-python-basic-06","date":"2020-05-01T03:30:00.000Z","updated":"2020-12-11T05:39:44.753Z","comments":true,"path":"/python/basic-06.html","link":"","permalink":"http://www.idealx.cn/python/basic-06.html","excerpt":"","text":"Python3 基础学习笔记（六） -- 元组 - 4 元组元组（Tuple）类似列表，与列表的主要区别有以下两点。 （1）元组不能对其元素进行变动，而列表允许。 （2）元组用小括号表示()，而列表使用中括号[]。 - 4.1 元组基础知识元组（Tuple）是不可变的序列，也是一种可以存储各种数据类型的集合，用小括号 () 表示元组的开始和结束，元素之间用逗号 , 分隔。类似列表。 这里的不可变，包括不能对元组对象进行增加元素、变换元素位置、修改元素、删除元素操作。 元素中每个元素提供对应的一个下标，下标从 0 开始，0、1、2…按顺序标注。 - 4.1.1 元组基本定义这里使用 交互式解释器（IDLE解释器） 进行记录。 12345&gt;&gt;&gt; () # 空元组()&gt;&gt;&gt; test1 = () # 定义空元组变量&gt;&gt;&gt; len(test1) # 统计元组元素个数0 # 统计结果为 0 多数据类型的、多元素、重复元素元组对象定义： 123&gt;&gt;&gt; test2 = (1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;) # 定义多元素、多数据类型、可重复的数组&gt;&gt;&gt; test2 # 执行元组变量 test2(1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;) # 显示元组变量的所有元素结果 - 4.1.2 一个元素的元组定义123&gt;&gt;&gt; test3 = (10) # 给变量 test3 赋值&gt;&gt;&gt; type(test3) # 用 type函数 检查 test3 的对象类型&lt;class &#x27;int&#x27;&gt; # 检查结果是整型 当给元组变量赋一个元素时，不能采用 test3 = (1)。该赋值结果 Python 会把 1 两边的小括号当作数学运算中的小括号，其结果和 test3 = 1 一致。 要给元组变量赋一个元素，并消除小括号歧义，需要使用以下方式： 12345&gt;&gt;&gt; test3 = (&#x27;OK&#x27;,) # 给 test3 变量赋一个元组元素，必须带逗号&gt;&gt;&gt; type(test3)&lt;class &#x27;tuple&#x27;&gt; # 检查元组类型，正确&gt;&gt;&gt; print(test3)(&#x27;OK&#x27;,) # 输出带逗号的元组 元组赋值带逗号，是元组区别于其他数据类型的一个特性。 - 4.1.3 省略小括号的元组定义Python 允许一种省略小括号的元组。 12345&gt;&gt;&gt; name,age=&#x27;rain&#x27;,19&gt;&gt;&gt; (name,age)(&#x27;rain&#x27;, 19)&gt;&gt;&gt; name,age # 执行不带小括号的元组(&#x27;rain&#x27;, 19) - 4.2 元组基本操作 元组操作实现分为三个部分： 第一部分，借助运算操作符号实现，例如=、+； 第二部分，借助元组自带的方法实现； 第三部分，借助 Python 内置函数实现； 元组基本操作方法 方法名称 方法功能描述 count 统计指定的元素个数 index 返回指定元素的下标 元组操作相关内置函数 函数名称 函数功能描述 len 统计元组元素个数 max 返回元组中最大值的元素 min 返回元组中最小值的元素 tuple 将列表转换为元组 type 返回对象类型 del 删除整个元组对象 sum 对元组对象的所有元素求和 - 4.3 元组操作实例- 4.3.1 建立元组创建一个 .py 文件： 1234567nums = (1, 2, 3, 4, 5) # 定义元组1words = (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;) # 定义元组2mix = (nums, words) # 元组嵌套元组print(mix) # 打印list = [&#x27;YES&#x27;] # 定义列表mix = (nums, words, list) # 元组嵌套print(mix) # 打印 输出结果： 12((1, 2, 3, 4, 5), (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;))((1, 2, 3, 4, 5), (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;), [&#x27;YES&#x27;]) 从这个案例可以看出，元组不仅可以嵌套元组，还可以嵌套其他数据类型。 - 4.3.2 查找元素查找元组中的元组，主要通过元组下标来实现。类似列表。 创建一个 .py 文件： 12nums = (1, 2, 3, 4, 5)print(nums[0]) 输出结果： 11 查找指定元素可以使用 index方法 ，参考 3.2.2 查找列表元素。 - 4.3.3 删除元组对元组的元素删除是不被允许的，但可以使用 del函数，对整个元组进行删除。 参考3.2.4 删除列表元素 （4）del 函数 - 4.3.4 统计元组（1）count()方法 与列表一致，参考 3.2.3 统计列表元素 （2）len 函数 通过len()函数进行统计。非常常见，此处不给出示例。 （3）sum 函数 利用 sum函数 对数字元组求和。与列表类似，参考 3.3.2 对数字列表执行简单的统计计算 。 - 4.3.5 合并元组1234nums = (1, 2, 3, 4, 5)words = (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;)mix = nums + wordsprint(mix) 输出结果： 1(1, 2, 3, 4, 5, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;) - 4.3.6 转换元组（1）列表转换为元组 使用 tuple() 函数： 1234list1 = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;]l_to_t = tuple(list1)print(l_to_t)print(type(l_to_t)) 输出结果： 12(&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;)&lt;class &#x27;tuple&#x27;&gt; （2）元组转换为列表 使用 list() 函数： 1234words = (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;)t_to_l = list(words)print(t_to_l)print(type(t_to_l)) 输出结果： 12[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]&lt;class &#x27;list&#x27;&gt; 小结元组和列表非常相似，甚至可以说元组是无法操作元素的列表。 Update 2020-05-01：也许接下来要暂停 Python 博文编写一段时间了。","categories":[{"name":"Python学习笔记","slug":"Python学习笔记","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础学习","slug":"Python学习笔记/基础学习","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.idealx.cn/tags/python/"},{"name":"语言基础","slug":"语言基础","permalink":"http://www.idealx.cn/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"}]},{"title":"Re:从零开始的思科模拟器之交换机安全端口设置","slug":"10-cisco-01","date":"2020-04-29T02:50:00.000Z","updated":"2020-12-11T05:39:38.239Z","comments":true,"path":"/cisco/01.html","link":"","permalink":"http://www.idealx.cn/cisco/01.html","excerpt":"","text":"思科模拟器 之 交换机安全端口设置 注意：本文不太适合新手直接阅读，请配合思科官方文档观看。 本文使用的模拟器为 Cisco Packet Tracer 6.2 Student Version 本文给出交换机端口安全配置的两个示例 一、 端口绑定MAC地址按照拓扑图连接，配置两台PC的IP地址。 如图所示： PC 0的IP地址为：192.168.1.2/24 PC 1的IP地址为：192.168.1.3/24 PC 1的MAC地址为：0002.164D.DE81 1、 绑定一个非 PC 1的MAC地址，检查是否可以ping通PC 0。 配置交换机： 1234567891011Switch&gt;enSwitch#Switch#conf tEnter configuration commands, one per line. End with CNTL&#x2F;Z.Switch(config)#hostname SW1SW1(config)#int range f0&#x2F;1-2SW1(config-if-range)#switchport mode accessSW1(config-if-range)#switchport port-security maximum 1SW1(config-if-range)#switchport port-security violation protectSW1(config-if-range)#int f0&#x2F;10SW1(config-if)#switchport port-security mac-address 0002.164d.de00 PC 1 ping PC 0 测试：无法ping通 2、 修改交换机配置，将PC 1的MAC地址绑定，再次测试： 123SW1(config)#int f0&#x2F;2SW1(config-if)#no switchport port-security mac-address 0002.164d.de00SW1(config-if)#switchport port-security mac-address 0002.164d.de81 Ping 通。 实验结果正确。 二、限制最大连接数为1按照拓扑图连接，并配置对应IP： 配置交换机SW2： 123456789Switch&gt;enSwitch#conf tEnter configuration commands, one per line. End with CNTL&#x2F;Z.Switch(config)#hostname SW2SW2(config)#int range f0&#x2F;11-14SW2(config-if-range)#switchport mode access SW2(config-if-range)#switchport port-security SW2(config-if-range)#switchport port-security maximum 2SW2(config-if-range)#switchport port-security violation protect 首先配置最大连接数为2，测试是否能ping通： 仅能ping通1个，猜测交换机也算一台设备 修改交换机配置，设maximum为3： 12SW2(config)#int range f0&#x2F;11-14SW2(config-if-range)#switchport port-security maximum 3 全ping通。 然后限制maximum为1，修改交换机SW2的配置： 12SW2(config)#int range f0&#x2F;11-14SW2(config-if-range)#switchport port-security maximum 1 注意：此时会报出maximum小于mac地址的错误，此时： 断开连接的f0/14的线缆， 然后重新配置SW2： 123456SW2(config-if-range)#no switchport port-security violation protectSW2(config-if-range)#no switchport port-security maximum 3SW2(config-if-range)#no switchport port-security SW2(config-if-range)#switchport port-securitySW2(config-if-range)#switchport port-security maximum 1SW2(config-if-range)#switchport port-security violation protect 然后进行ping测试： 测试成功，全不通。 小结别说了，XX思科模拟器。","categories":[{"name":"网络","slug":"网络","permalink":"http://www.idealx.cn/categories/%E7%BD%91%E7%BB%9C/"},{"name":"基础学习","slug":"网络/基础学习","permalink":"http://www.idealx.cn/categories/%E7%BD%91%E7%BB%9C/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"思科模拟器","slug":"思科模拟器","permalink":"http://www.idealx.cn/tags/%E6%80%9D%E7%A7%91%E6%A8%A1%E6%8B%9F%E5%99%A8/"},{"name":"cisco","slug":"cisco","permalink":"http://www.idealx.cn/tags/cisco/"},{"name":"网络基础","slug":"网络基础","permalink":"http://www.idealx.cn/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"}]},{"title":"Re:从零开始的Python3学习笔记 05","slug":"09-python-basic-05","date":"2020-04-27T03:00:00.000Z","updated":"2020-12-11T05:39:29.922Z","comments":true,"path":"/python/basic-05.html","link":"","permalink":"http://www.idealx.cn/python/basic-05.html","excerpt":"","text":"Python3 基础学习笔记（五） -- 列表2 - 3.2.6 排序列表元素列表元素提供了 sort()方法 对列表进行排序。 排序（Sort），按照次序分为 增序 和 减序（又叫升序、降序）；增序一般根据 ASCII 码由小到大对字符、数字进行排序，减序则相反。 sort() 方法使用格式为 A.sort(key=none,reverse=False) . A 为列表对象 key 为可选参数，默认值为 none，用于指定在做比较之前，调用何种函数对列表元素进行处理，比如 key=str.lower。 reverse 为可选参数，默认为增序，使用reverse=True做减序处理。 示例： 1234567fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;pear&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;]fruits_1 = fruits.copy()fruits_2 = fruits.copy()fruits_1.sort()fruits_2.sort(reverse=True)print(fruits_1)print(fruits_2) 输出结果： 12[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;pear&#x27;, &#x27;watermelon&#x27;][&#x27;watermelon&#x27;, &#x27;pear&#x27;, &#x27;peach&#x27;, &#x27;banana&#x27;, &#x27;apple&#x27;] 如果不想改变原有列表，则可以采用 sorted() 函数，对列表对象直接排序。sorted 函数也可用于元组、字典的排序。 - 3.2.7 复制列表copy() 方法使用格式为 A.copy() 。通过 copy() 方法实现列表在内存里的复制（深拷贝）。 1234fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;pear&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;]fruits_1 = fruits.copy()print(id(fruits)) # 打印列表的内存地址print(id(fruits_1)) 输出结果： 1230446235421523044632643272 如果是使用赋值号，则内存地址不变，是浅拷贝。 - 3.2.8 统计列表元素count() 方法 使用格式为 A.count(str) 。其中 str 为需要统计的元素。使用该方法实现对列表指定元素个数的统计。 123fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;pear&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;peach&#x27;]x = fruits.count(&#x27;peach&#x27;)print(x) 输出结果： 12 - 3.2.9 反向列表元素reserve() 方法 使用格式为 A.reverse() 。通过该方法可以实现对列表元素的永久反向。 1234text = [1, 2, 3, 4, 5]print(text)text.reverse()print(text) 输出结果： 12[1, 2, 3, 4, 5][5, 4, 3, 2, 1] 列表做反向操作前后，列表对应的地址不变。 - 3.2.10 列表解析Python 语言还为列表提供了基于列表本身的元素操作语句解析功能。 语法如下： 12[expression for iter_val in iterable][expression for iter_val in iterable if cond_expr] 示例：对集合 0~10 中，除了 0 外，其他元素做平方运算。 12squares = [i ** 2 for i in range(11) if i &gt; 0]print(squares) 输出结果： 1[1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 这样的写法，优点是简洁，缺点是调试不方便、写法不常见。 上述示例等价一般代码实现： 1234squares = []for i in range (1,11): squares.append(i ** 2)print(squares) - 3.3 其他列表相关操作列表的一些用法。 - 3.3.1 遍历整个列表使用 for 循环来遍历整个列表： 123fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;pear&#x27;, &#x27;peach&#x27;]for fruit in fruits: print(fruit) 输出结果： 1234applebananapearpeach - 3.3.2 对数字列表执行简单的统计计算使用交互式解释器(IDLE解释器)**来理解 **min函数、max函数、sum函数 。 1234567&gt;&gt;&gt; nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]&gt;&gt;&gt; min(nums)1&gt;&gt;&gt; max(nums)9&gt;&gt;&gt; sum(nums)45 - 3.4 后记我码字的速度远远比不上我学习的速度……大概吧。","categories":[{"name":"Python学习笔记","slug":"Python学习笔记","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础学习","slug":"Python学习笔记/基础学习","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.idealx.cn/tags/python/"},{"name":"语言基础","slug":"语言基础","permalink":"http://www.idealx.cn/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"}]},{"title":"Re:从零开始的Python3学习笔记 04","slug":"08-python-basic-04","date":"2020-04-21T10:00:00.000Z","updated":"2020-12-11T05:39:23.928Z","comments":true,"path":"/python/basic-04.html","link":"","permalink":"http://www.idealx.cn/python/basic-04.html","excerpt":"","text":"Python3 基础学习笔记（四） -- 列表与操作列表 - 3.1 列表列表（List）是由一系列按特定顺序的元素组成，在 Python 中用方括号 [] 来表示列表，并用逗号来分隔其中的元素。类似其他语言中的“数组”，但有一些区别。 列表是 Python 语言显著区别于其他语言的一种数据结构，其设计更具灵活性，可以弥补字符串本身的各种缺陷。 - 3.1.1 列表基本知识**使用交互式解释器**理解列表： 12345678910&gt;&gt;&gt; [] # 空列表[]&gt;&gt;&gt; list1 = [] # 定义空列表&gt;&gt;&gt; len(list1) # 列表长度（元素个数）:len()函数0 # list1 的长度为 0&gt;&gt;&gt; list2 = [1,2] # 定义列表&gt;&gt;&gt; len(list2)2&gt;&gt;&gt; print(list2) # 输出列表[1, 2] len() 函数 可以快速获得列表的长度，经常在循环语句中使用。 列表的不同数据类型元素成员: 12345678910111213141516&gt;&gt;&gt; test1 = [1,2,3,4] # 列表元素全为数字类型&gt;&gt;&gt; len(test1)4&gt;&gt;&gt; test2 = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;] # 列表元素全为字符串&gt;&gt;&gt; len(test2)3&gt;&gt;&gt; test3 = [10,20,&#x27;x&#x27;,&#x27;y&#x27;] # Python 列表元素支持综合类型&gt;&gt;&gt; len(test3)4&gt;&gt;&gt; print(test3)[10, 20, &#x27;x&#x27;, &#x27;y&#x27;]&gt;&gt;&gt; test4 = [&#x27;ABC&#x27;, test1] # Python 列表元素也可以列表&gt;&gt;&gt; len(test4)2&gt;&gt;&gt; print(test4)[&#x27;ABC&#x27;, [1, 2, 3, 4]] 和大部分语言一样，Python 列表的下标（索引）也是从 0 开始的。 12345678910list1 = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]print(list1[0]) # 第一个元素print(list1[3])print(list1[-1]) # Python 支持倒过来找。print(list1[-2])# 结果:aded - 3.1.2 列表切片操作1234567891011list = [1,2,3,4,5,6]print(list[:]) #省略全部，代表截取全部内容，可以用来将一个列表拷给另一个列表print(list[:3]) #省略起始位置的索引，默认起始位置从头开始，结束位置索引为2print(list[3:]) #省略结束位置的索引，默认结束位置为最后一个，开始位置索引为3print(list[1:4]) #开始位置索引为1，结束位置索引为3，顾头不顾尾print(list[4:1]) #从左到右索引，因此为空值print(list[-1:-3]) #从左到右索引，因此为空值print(list[-3:-1]) #开始位置索引为倒数第三个，结束位置索引为倒数第二个print(list[1:5:2]) #开始位置索引为1，结束位置索引为4，间隔2print(list[5:1:-1]) #反向取值，开始位置索引为5，结束位置索引为2print(list[::-1]) #反向取值，反向输出列表 输出结果： 12345678910[1, 2, 3, 4, 5, 6][1, 2, 3][4, 5, 6][2, 3, 4][][][4, 5][2, 4][6, 5, 4, 3][6, 5, 4, 3, 2, 1] - 3.1.3 使用列表中的元素方法 title() 可以像使用其他变量一样使用列表中的各个值。 123list_test = [&#x27;C&#x27;, &#x27;C++&#x27;, &#x27;Java&#x27;, &#x27;Python&#x27;, &#x27;php&#x27;, &#x27;JavaScript&#x27;]message = list_test[4].title() + &quot;是世界上最好的语言!(雾)&quot;print(message) 输出结果 1Php是世界上最好的语言!(雾) - 3.2 列表基本操作 —- 组织列表在创建的列表中，元素的排列顺序常常是无法预测的。Python 提供了很多组织列表的方式，可根据具体情况使用。 列表支持对集合元素进行增加、查找、修改、删除、合并操作等。 方法名称 方法功能描述 append 在列表尾部增加元素 clear 列表清空 copy 复制生成另外一个列表 count 统计指定元素个数 extend 两个列表元素合并 index 返回指定元素的下标 insert 在指定位置插入新元素 pop 删除并返回指定下标对应的元素 remove 删除列表中指定元素 reverse 反转列表元素顺序 sort 对列表元素进行排序 - 3.2.1 添加列表元素列表提供 append() 方法和 insert() 方法添加列表元素。 （1）方法 append() ：在列表末尾添加元素。 1234list = [1, 2, 3, 4, 5, 6]print(list)list.append(7)print(list) 输出结果： 12[1, 2, 3, 4, 5, 6][1, 2, 3, 4, 5, 6, 7] **（2）方法insert()**：在列表指定位置添加元素 12345fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;]print(fruits)fruits.insert(0,&#x27;watermelon&#x27;)fruits.insert(1, 10)print(fruits) 输出结果： 12[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;][&#x27;watermelon&#x27;, 10, &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;] - 3.2.2 查找列表元素列表可以通过 index() 方法、in成员运算符、下标、切片查找相应的元素信息。 这里这里使用 交互式解释器 理解 index() 方法。（当然直接写.py程序是一样的，交互式解释器可以更好地理解方法的运行方式。） index() 方法使用格式为 **A.index(value,[start[,stop]])**。其中，A 是列表对象，value 代表需要在列表 A 查找的元素，start 代表在列表里开始查找的下标数，stop 则代表查找结束的下标数，中括号代表 start、stop 是可选的参数。若查到元素，则会返回第一个找到的元素；若未查找到元素，则会返回错误信息。 123456789101112&gt;&gt;&gt; listx = [&#x27;alice&#x27;, 1, 2, 4, 1]&gt;&gt;&gt; listx.index(&#x27;alice&#x27;) # 在列表里查找0 # 返回列表下标 0&gt;&gt;&gt; listx.index(1)1&gt;&gt;&gt; listx.index(1,2) # 从下标 2 开始查找元素14 # 返回下标 4&gt;&gt;&gt; listx.index(10) # 查找数字10，返回错误信息Traceback (most recent call last): File &quot;&lt;pyshell#13&gt;&quot;, line 1, in &lt;module&gt; listx.index(10)ValueError: 10 is not in list 如果 不在 交互式解释器 中的话，index() 方法输出需要写成类似 print(listx.index(1)) 的输出结果哦。 - 3.2.3 修改列表元素列表可以通过指定下标，对相对应的元素进行赋值修改。 与字符串相比，列表元素具有可修改的特点，使其获得了巨大的操作灵活性。 1234listx = [1, 2, 3, &#x27;alice&#x27;]print(listx)listx[0] = &#x27;underworld&#x27;print(listx) 输出结果： 12[1, 2, 3, &#x27;alice&#x27;][&#x27;underworld&#x27;, 2, 3, &#x27;alice&#x27;] - 3.2.4 删除列表元素（1）clear() 方法：清除列表对象里的所有元素，列表对象变成空列表 123456fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;]print(fruits)print(len(fruits))fruits.clear()print(fruits)print(len(fruits)) 结果如下： 1234[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;]3[]0 （2）pop() 方法 pop() 方法可以弹出并删除最后一个元素，或者弹出指定下标的元素。 1、使用 pop() 方法删除最后一个元素 pop() 的无参方法可以删除列表末尾的元素，并能够接着使用它。术语 弹出（pop）源自这样的类比：列表就像是一个栈，而删除列表末尾的元素就相当于弹出栈顶元素： 12345fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;]print(fruits)new_list = fruits.pop()print(fruits)print(new_list) 输出结果： 123[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;][&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;]banana 2、使用 pop() 方法删除指定位置的元素 pop([index]) 指定参数来删除指定位置的元素。 12345fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;]print(fruits)new_list = fruits.pop(2) # 指定列表下标 2print(fruits)print(new_list) 输出结果： 123[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;][&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;]peach （3）remove() 方法：删除未知位置的元素 当我们不知道元素的位置，只知道元素的值的时候，可以使用该方法。 1234fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;]print(fruits)fruits.remove(&#x27;banana&#x27;)print(fruits) 输出结果： 12[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;][&#x27;apple&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;] 注意：remove() 方法与index() 方法类似，只能查找到第一个。 （4）del 函数 Python 语言里的 del 函数具有强大的对象删除功能，它也可以用来删除列表里指定的元素，甚至把整个列表对象删除。 123456fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;]print(fruits)del(fruits[4]) # 删除下标为 4 的元素print(fruits)del fruits # 删除列表对象print(fruits) 输出结果： 123456[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;][&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;]Traceback (most recent call last): File &quot;C:\\Users\\ideallove\\Desktop\\pythontest2.py&quot;, line 6, in &lt;module&gt; print(fruits)NameError: name &#x27;fruits&#x27; is not defined 从以上举例可以知道，一旦元素或列表对象被删除，它的内存地址将会被回收，无法继续使用。 - 3.2.5 合并列表元素（1）extend() 方法：将两个列表对象合并 1234listx = [1, 2, 3, 4, 5]fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;]listx.extend(fruits)print(listx) 输出结果： 1[1, 2, 3, 4, 5, &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;] （2）使用运算符 123456listx = [1, 2, 3, 4, 5]fruits = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;]print(id(listx)) # 获取打印合并前的内存地址listx = listx + fruitsprint(id(listx)) # 获取打印合并后的内存地址print(listx) 输出结果： 12318324054602961832405461384[1, 2, 3, 4, 5, &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;peach&#x27;, &#x27;watermelon&#x27;, &#x27;banana&#x27;] 采用运算符合并赋值的方法，会使合并后的列表在内存中的地址号改变，这说明列表合并后被重新定义了（更换了列表对象）。 但是extend()方法不会更改内存地址号。 两种方法都可以达到合并的结果。","categories":[{"name":"Python学习笔记","slug":"Python学习笔记","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础学习","slug":"Python学习笔记/基础学习","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.idealx.cn/tags/python/"},{"name":"语言基础","slug":"语言基础","permalink":"http://www.idealx.cn/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"}]},{"title":"Re:从零开始的Python3学习笔记 03","slug":"07-python-basic-03","date":"2020-04-06T09:40:00.000Z","updated":"2020-04-07T02:20:00.000Z","comments":true,"path":"/python/basic-03.html","link":"","permalink":"http://www.idealx.cn/python/basic-03.html","excerpt":"","text":"Python3 基础学习笔记（三） -- 条件分支与循环 - 2 条件分支与循环Python 语言的条件分支、循环使得代码内容具有了逻辑判断以及处理能力，如判断某个条件是真的还是假的，然后去执行不同的代码功能模块。这好比野外探险者，往山上走，结果会迷路；往山下走，会碰到提供帮助的人。不同的逻辑判断和选择，会产生不同的效果，在计算机编程上也是如此。程序员会把条件分支与循环语句结合数据，可以实现灵活而功能强大的各种代码算法。 在 Python 中的条件分支与循环语句，有着严格的缩进要求，这与其他语言使用的大括号不太一样。 - 2.1 if 条件分支if 语句是 Python 语言基本的条件分支判断语句，它为代码的逻辑判断提供了操作方法。 - 2.1.1 单分支判断12if boolean_value1: 子模块代码1 1）判断条件 boolean_value1 为 if 语句判断条件，以布尔值的形式判断 if 语句是否执行子代码模块1。当boolean_value1 值为 True 时，则执行子代码模块1；当值为 False 时，则不执行。 对于 boolean_value1 ，除了直接采用布尔值外，还可以以表达式的形式体现，表达式计算最终结果为布尔值。 2）示例 12345678# 示例 &gt;&gt;&gt; if True: print(&#x27;OK&#x27;)OK # 结果# 示例2&gt;&gt;&gt; if 2&lt;5: print(&#x27;YES&#x27;)YES # 结果 说明： （1）if 语句的 “:” 冒号不能省略，并且要求是半角符号； （2）注意缩进，上述示例子模块代码中，必须先输入4个空格（或者 Tab 键），或者直接按Enter 接受默认换行。 - 2.1.2 双分支判断1234if boolean_value1: 子模块代码1else: 子模块代码2 示例（运行 .py 程序，也可使用交互式解释器）： 12345if False: # 条件值为False print(&#x27;YES&#x27;) # 不执行这一行else: print(&#x27;NO&#x27;) # 因此执行这一行NO # 结果 - 2.1.3 多条件多分支判断123456if boolean_value1: 子模块代码1elif boolean_value2: 子模块代码2else: 子模块代码3 elif 其实是else if的缩写（在Python中必须用elif）。 这里引入 elif 进行新的条件判断，在 if 语句中 elif 可以根据实际情况连续使用。但是else只能用在最后而且只能用一次。 12345678910neko = &#x27;猫&#x27;if neko == &#x27;狗&#x27;: print(&#x27;不是猫&#x27;)elif neko == &#x27;兔子&#x27;: print(&#x27;不是猫&#x27;)elif neko == &#x27;猪&#x27;: print(&#x27;不是猫&#x27;)else: print(&quot;是猫&quot;)是猫 # 结果 if 语句支持嵌套。 - 2.2 while 循环while 循环语句为程序员提供了循环处理算法的功能。 1） while 语句基本用法 12while boolean_value1: 子模块代码1 这里使用简单流程图来说明： 12345678st&#x3D;&gt;start: 开始wh&#x3D;&gt;condition: while...条件循环code&#x3D;&gt;operation: Code操作en&#x3D;&gt;end: While结束st-&gt;whwh(no)-&gt;enwh(yes)-&gt;code-&gt;wh 2）示例一 1234567i = 0 # 循环控制变量i赋初值0while i &lt; 3: # 当i小于3时，执行下面两行子模块代码 i += 1 # i 做加1运算 print(i) # 打印输出i1 # 第1次循环结构,i=12 # 第2次循环结构,i=23 # 第3次循环结构,i=3 与 if 语句一样，while语句也具备嵌套使用的功能。 3）示例二（嵌套） 123456789101112i,j = 0,6while i&lt;3: while i&lt;j: print(&quot;%d&quot;%((i+1)*j)) j-=1 i+=1 # 该行仅收到第1个while控制，通过缩进格式对其控制代码行范围654321 - 2.3 for 循环语句for 循环语句是 Python 语言的另外一种形式的循环控制语句。 1）for 语句基本用法 for 语句的基本语法格式如下： 1234for &lt;variable&gt; in &lt;sequence&gt;: 子模块代码1else: 子模块代码2 variable 接受 sequence 集合中获取的成员元素，循环一次接受一次。 2）示例1：利用自定义集合对象实现for循环 123456789zhi_record = &#x27;一只羊、两只羊、三只羊、一头猪、两头猪、三头猪&#x27;i = 0for var in zhi_record: # 循环一次var获取一个字符，一个汉字为一个双字节字符 if var == &#x27;只&#x27;: i = i + 1 print(i)1 # 找到第1个“只”字符2 # 找到第2个“只”字符3 # 找到第3个“只”字符 该例把字符串当作集合，对所有字符进行了遍历比较，并把经过比较确认是“只”的字符个数进行统计，并打印输出 3）示例2：利用内建范围函数 range 实现 for 循环 123456789for i in range(9): # range(9)为0~8的有序集合 if i % 2 == 0: print(&#x27;%d是偶数&#x27;%(i))# 执行结果如下0是偶数2是偶数4是偶数6是偶数8是偶数 4）示例3：range函数的另外一种用法 格式为 range(start,stop[,step])。start 代表数字的开始值，stop 代表数字的结束值，step 代表循环时数字递增的步长（默认值为1）。 1234567for i in range(1,9,2): print(i)# 执行结果如下1357 - 2.4 循环控制语句在 while 和 for 循环过程中，为了更加灵活地控制循环次数，Python 提供了 break 和 continue 循环控制语句。 - 2.4.1 break 语句break 语句可以立即终止并跳出循环。 12345678910uw = &#x27;Kirito,Alice,Eugeo,Asuna&#x27;for i in range(len(uw)): print(&#x27;for循环%d次&#x27;%(i+1)) # 检查循环次数 if uw[i:i+6] == &#x27;Kirito&#x27;: # 条件判断 print(&#x27;Kirito is %d&#x27;%(i)) break print(&#x27;for循环继续吗？%d次&#x27;%(i+1))# 执行结果for循环1次Kirito is 0 利用break语句，可以实现高效率的循环查找过程。 break 语句适用于 while 和 for 语句。 - 2.4.2 continue 语句continue 语句在满足条件的情况下回到循环开始处，继续循环，而忽略了continue后的语句。 12345678910for i in range(9): if i % 2 != 0: continue print(&#x27;%d为偶数&#x27;%(i))# 运行结果0为偶数2为偶数4为偶数6为偶数8为偶数 continue 语句同样适用于 while 和 for 语句。 实际编程中，continue 语句使用较少。 - 2.5 复杂条件及处理if、while和for控制的条件分支和循环分支，除了使用简单的变量、算数运算符、比较运算符、赋值运算符、逻辑运算符、位运算符外，还可以使用 成员运算符、身份运算符 进行参与逻辑判断，或者在上述基础上进行综合条件判断。 - 2.5.1 成员运算符对于具有集合概念的对象如数字序列、字符串、列表、元组、字典，可以通过成员运算符进行快速判断，而且代码会显得非常简洁。 运算符 运算规则描述 in 在指定序列中找到值，返回True，否则返回False not in 在指定序列中找不到值，返回True，否则返回False 示例： 12345if 2 not in range(10): print(&#x27;2不在集合里&#x27;)else: print(&#x27;2在集合里&#x27;)2在集合里 # 结果 - 2.5.2 身份运算符Python 代码在内存中运行时会生成各种各样的实体对象，如数字对象、字符串对象、列表对象、元组对象、字典对象等。通过身份运算符可以判断两个标识符（对象名）是否引用自同一个对象。若在内存中不同对象名指向的内存地址为同一个地址，那么它们是引用自一个对象。 运算符 运算规则描述 is 判断两个表示是不是引用自一个对象，是则返回True，否则返回False not is 判断两个表示是不是引用自不同对象，返回True，否则返回False 123456789&gt;&gt;&gt; a=b=1 # 为a和b赋值&gt;&gt;&gt; a is b # 判断a和b是否引用同一对象True&gt;&gt;&gt; c=1&gt;&gt;&gt; a is cTrue&gt;&gt;&gt; c=2&gt;&gt;&gt; a is cFalse","categories":[{"name":"Python学习笔记","slug":"Python学习笔记","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础学习","slug":"Python学习笔记/基础学习","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.idealx.cn/tags/python/"},{"name":"语言基础","slug":"语言基础","permalink":"http://www.idealx.cn/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"}]},{"title":"Re:从零开始的Python3学习笔记 02","slug":"06-python-basic-02","date":"2020-03-16T07:40:00.000Z","updated":"2020-03-16T08:45:00.000Z","comments":true,"path":"/python/basic-02.html","link":"","permalink":"http://www.idealx.cn/python/basic-02.html","excerpt":"","text":"Python3 基础学习笔记（二） -- 函数、模块 - 1.5 函数在 Python 中，像 C 语言一样，我们称为函数；在 Java 中，我们称为方法。 这里记录几个比较简单的函数，后面会遇到各种各样的函数和函数库。 pow 函数函数 pow 相当于 乘方 （power）运算。它可以 用于编写数值表达式。 1234&gt;&gt;&gt; 2 ** 101024&gt;&gt;&gt; pow(2, 10)1024 像 pow 函数这样的标准函数，称为 内置函数 。 abs 函数函数 abs 计算 绝对值 （absolute value） ，绝大多数编程语言甚至 excel 中的公式都是这样。 12&gt;&gt;&gt; abs(-1024)1024 round 函数函数 round 将浮点数圆整为与之 最接近 的整数。 1234&gt;&gt;&gt; 5 // 31&gt;&gt;&gt; round(5/3)2 整除总是向下圆整，round函数总是向最近的整数圆整。 int 函数函数 int 将浮点数转换向下圆整为整数。 12&gt;&gt;&gt; int(19.9)19 其他向下圆整和向上圆整的函数将在「模块」部分记录。 - 1.6 模块使用 import 命令使用模块。模块 是 基础函数 的扩展，通过将其导入可以扩展 Python 的功能。（就像 Java 的import 一样） - 1.6.1 import 命令12345&gt;&gt;&gt; import math&gt;&gt;&gt; math.floor(20.9) # 向下圆整20&gt;&gt;&gt; math.ceil(20.4) # 向上圆整21 如果确定不会从不同的模块导入多个同名函数，可能不想每次调用函数时都指定函数名。这种情况下，需要使用import 命令的变种 from module import function 。 sqrt 函数函数 sqrt 计算 平方根（square root） 123&gt;&gt;&gt; from math import sqrt&gt;&gt;&gt; sqrt(16)4.0 - 1.6.2 使用变量引用函数在 Python 中可以使用变量来引用函数（以及其他大部分的 Python 元素）。 123&gt;&gt;&gt; XD = math.sqrt # 变量XD&gt;&gt;&gt; XD(4)2.0 - 1.6.3 复数 和 cmath函数 sqrt 用于计算平方根，但它仅限于 实数 领域。 12345&gt;&gt;&gt; sqrt(-2)Traceback (most recent call last): File &quot;&lt;pyshell#15&gt;&quot;, line 1, in &lt;module&gt; sqrt(-2)ValueError: math domain error # 这是报错信息 直接使用 math 函数库中的 sqrt 函数会报错，有些平台可能显示 nan （非数值 not a number）。 如果是复数（complex number）的话，Python 标准库提供了一个专门用于处理复数的模块。 12345&gt;&gt;&gt; import cmath&gt;&gt;&gt; cmath.sqrt(-1)1j&gt;&gt;&gt; (1 + 3j) * (10 + 2j)(4+32j) 1j 是一个虚数，虚数以 j 或者 J 结尾。 Python 本身提供了对复数的支持，Python 没有专门表示虚数的类型，而将虚数视为实部为零的复数。 以上演示都在交互式解释器中执行。当然，也可以创建一个 .py 文件，像创建 C 程序或 Java 程序一样。 - 1.6.4 海龟绘图法Python 有一些有趣的玩意儿，比如海龟（turtle）。它的绘画功能十分不可思议。 12345678# turtle_01.py 画出一个三角形import turtlet=turtle.Pen()t.forward(100)t.left(120)t.forward(100)t.left(120)t.forward(100) 会看到一个三角形的物体在移动，那就是海龟，哈哈哈哈。 再画一些有趣的东西。 12345678910# NiceHexSpiral.pyimport turtlecolors=[&#x27;red&#x27;,&#x27;purple&#x27;,&#x27;blue&#x27;,&#x27;green&#x27;,&#x27;yellow&#x27;,&#x27;orange&#x27;]t=turtle.Pen()turtle.bgcolor(&#x27;black&#x27;)for x in range(360): t.pencolor(colors[x%6]) t.width(x/100+1) t.forward(x) t.left(59) 这是一个彩色螺旋线的 Demo，可以看到 Python 语言来实现它真的非常容易。 其中涉及的列表、循环语句等将在后面记录。 - 1.7 数据类型转换当一种类型的数据被使用时，有时需要将其转换为其他类型的数据。Python 提供了一些内置函数。 1、转化为整数：函数 int(x)，x 为数字或字符串型的数字，但不支持复数。 1234&gt;&gt;&gt; int(5.2)5 # 小数部分丢弃&gt;&gt;&gt; int(&#x27;20&#x27;)20 2、转化为浮点数：函数 float(x)，x 为数字或字符串型的数字，但不支持复数。 1234&gt;&gt;&gt; float(50)50.0&gt;&gt;&gt; float(&#x27;20.5&#x27;)20.5 3、转化为复数：函数 complex(x,y)，x、y为整数、浮点数、布尔数；当只有 x 参数时 (y=0) 可以是字符串型整数、浮点数、布尔数。 1234&gt;&gt;&gt; complex(2,5)(2+5j)&gt;&gt;&gt; complex(&#x27;20&#x27;)(20+0j) 4、转化为字符串：函数str(x)，在将数字拼接进字符串时一定要用。 12&gt;&gt;&gt; str(2+5j)&#x27;(2+5j)&#x27; 在python2版本中不支持二进制、八进制和十六进制数字的转化。 5、转化为二进制数：函数 bin(x)，x 为非负整数。 12&gt;&gt;&gt; bin(3)&#x27;0b11&#x27; 6、转化为八进制数：函数 oct(x)，x 为非负整数。 12&gt;&gt;&gt; oct(10)&#x27;0o12&#x27; 7、转化为十六进制：函数 hex(x)，x 为非负整数。 12&gt;&gt;&gt; hex(20)&#x27;0x14&#x27; 8、将十进制数转化为 ASCII 码：函数 chr(x)，x 为十进制数。 12&gt;&gt;&gt; chr(98)&#x27;b&#x27; 9、将 ASCII 码转化为十进制数：函数 ord(x)，x 为 ASCII 码字符。 12&gt;&gt;&gt; ord(&#x27;b&#x27;)98 小结 &amp;&amp; 后记本节记录了函数和模块，经典的海龟绘图，以及简单的数据类型转换。 个人觉得 Python 似乎不是我想象中那么难，但是知识点还是非常多的，可能我学其他语言的时候没这么认真。 至少海龟绘图是非常有趣的。 Update 2020/3/26：添加了简单的数据类型转换","categories":[{"name":"Python学习笔记","slug":"Python学习笔记","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础学习","slug":"Python学习笔记/基础学习","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.idealx.cn/tags/python/"},{"name":"语言基础","slug":"语言基础","permalink":"http://www.idealx.cn/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"}]},{"title":"Re:从零开始的Python3学习笔记 01","slug":"05-python-basic-01","date":"2020-03-14T05:40:00.000Z","updated":"2020-03-16T03:45:00.000Z","comments":true,"path":"/python/basic-01.html","link":"","permalink":"http://www.idealx.cn/python/basic-01.html","excerpt":"","text":"update 2020-03-25：这是一个人类抗击病毒的历史时期才开始的笔记。这本笔记可能很长。 Python3 基础学习笔记（一） -- 快速上手：Python 基础知识1 - 0 安装 Python 3Python 语言提供了强大的交互式解释器，也可使用各种好用的编辑器或 IDE 来编写 .py 程序。 方法一：官方大法登陆 Python3 的官方网站：https://www.python.org/ 选择 “Download” 中的对应版本下载。 Update 2020-03-14 : 可以选择 Python 3.7 系列下载 Python 下载界面中出现的几个版本的介绍（以 64 位 Windows 计算机为例）： Windows help file : Windows 的帮助文档（.chm 文件 反正都是英文我也不想看） Windows x86-64 embeddable zip file : 可嵌入的 zip 文件 Windows x86-64 executable installer : 可执行文件（完整包）（基本上就是下载这个了） Windows x86-64 web-based installer : 可执行文件（安装时需要网络环境）（网速快的别听上一行） Windows x86 就是 32位 的 Windows版本，后面是一样的意思。 方法二：Visual Studio（微软大法）在 Visual Studio 的安装器里勾选 Python 即可;（然后在 VS 的 IDE 里用就行了，是真香） 其他大多数 Linux 发行版都安装了 Python2 和 Python3，在终端中输入： 1python2 --version 1python3 --version 如果两个都没有（不太可能），输入以下命令即可安装 1sudo apt-get install python 3 - 1 Python 基础知识快速上手本章节记录 Python 的基本使用知识。（也许它很长） 包括变量、数字与运算符、字符串、数据类型转换的记录，以及函数、模块的简单记录。 - 1.1 变量与语句本节记录 变量 和 基本语句 的知识。 - 1.1.1 变量本节记录变量的基本概念，以及变量值类型 变量（variable）是表示或指向特定值的名称。变量在计算机编程中与关联的标识符配对内存存储位置，在使用时含相关类型的值，其值可以修改。这里的标识符就是变量名。 12&gt;&gt;&gt; x # 变量X未赋值，解释器认为非法，报未定义错误&gt;&gt;&gt; x = 0 # 变量X赋予初值0，解释器执行通过 变量建立的结果，往往被其他代码所使用。 在 Python 语言中，当变量被使用时，在内存里将产生两个动作，一是开辟指定地址的空间，二是赋予指定的变量值。 注意：在 Python 语言中，变量在指定的同时，必须强制赋予初值，否则解释器报错。（而 C语言 或 Java 就不一定）这和 Python 变量值类型的机制有关。 变量值类型和注意事项所有的编程语言的变量值都是分类型的，而 Python语言 变量值的类型在赋值后才被隐性确定。例如 a=0 ，那么0就是整数类型的值；a=&#39;good&#39; 那么good就是字符串类型的值；a=True 那么True就是布尔类型的值。 Python 语言的基本变量类型包括 字符串（String）、数字（Numeric）、列表（List）、元组（Tuple）、字典（Dictionary）五大类。 变量名只能包含字母、数字和下划线。变量名可以字母或者下划线打头，但不能以数字开头 ; 变量名不能包含空格，可使用下划线来分割其中的单词 ; 不能将 Python关键字 或 函数名 用作变量名 ; 慎用小写字母 I 和大写字母 O，因为它们在某些字体下可能被看错成数字 1 和 0 ; 变量对应的是常量，即不能变的数据对象，如 print(“ICBM”)，这里的 ICBM 就是常量。 - 1.1.2 赋值与输出语句语句相当于 变量 和 表达式 的操作说明。语句会告诉 Python 我想干什么。 在1.1节例子中的 x 就是变量名，其值为数字 0 。Python 使用 **赋值号 = **对变量进行赋值。 同时，Python 使用 print() 函数进行输出操作; 12345678&gt;&gt;&gt; x = 3 # 赋值语句&gt;&gt;&gt; print(x) # 输出语句3 # 结果&gt;&gt;&gt; y = x + 2 # 赋值语句&gt;&gt;&gt; print(y) # 输出语句5 # 结果&gt;&gt;&gt; print(&quot;Hello Python&quot;) # 输出语句: 输出字符串Hello Python # 结果 Python 允许同时为多个变量赋值，并且 print() 函数允许多值打印输出，用逗号分隔变量。 123&gt;&gt;&gt; a = b = c = 5 # 同时为多个变量赋值&gt;&gt;&gt; print(a,b,c) # 同时打印多个变量5 5 5 # 结果 这里的三个变量 a , b , c 在内存中指向同一个地址，获得同一个值 5。 也可按照如下格式，给不同的变量名赋值。 123&gt;&gt;&gt; d,e,f = 5,10,15&gt;&gt;&gt; print(d,e,f)5 10 15 - 1.1.3 获取用户输入使用 input() 函数获取用户输入： 123&gt;&gt;&gt; input(&quot;Age: &quot;)Age: 20&#x27;20&#x27; 获取输入并赋值： 123456&gt;&gt;&gt; x = input(&quot;x: &quot;)x: 34&gt;&gt;&gt; y = input(&quot;y: &quot;)y: 20&gt;&gt;&gt; print(int(x) * int(y))680 - 1.2 数与运算符交互式 Python 解释器可用作功能强大的计算器; 在编程中，经常使用数字来记录数据、储存应用信息等; Python 语言的 数字（Digital）与数学里的数字是一致的，根据数字的用法以不同的方式处理它们，根据计算机语言处理的要求，这里把数字分为整数（Integer）、浮点数（Float）、复数（Complex）、布尔（Boolean）。 - 1.2.1 算数运算符以下是计算机能识别的算术运算符和运算次序，用于数字的各种计算 运算符 中文名称 功能描述 + 加 两个数字相加 - 减 两个数字相减 * 乘 两个数字相乘 / 除 两个数字相除 % 取模 返回除法的余数 ** 幂 返回 x 的 y 次幂 // 取整除 返回商的整数部分 () 运算次序 改变运算次序 1、在 Python2 版本下，当两个整数相除不能整除时，会产生 取整（//） 的效果，例如5/2的运算结果为2。而在 Python3 版本中，5/2的运算结果为2.5，并且所有除法的结果都为带小数的浮点数。 2、0 不能做除数。 - 1.2.2 整数在 Python 中，整数（Integer/Int） 又称为整型，由正整数、负整数和零构成，不包括小数、分数。整数的长度不受限制，仅受可用（虚拟）内存的限制。 12345678910111213141516171819&gt;&gt;&gt; # 以下都是表达式，可以直接在Python解释器中运算&gt;&gt;&gt; 3555 + 1314 # 加法4869&gt;&gt;&gt; 3 - 2 # 减法1&gt;&gt;&gt; 3 * 2 # 乘法6&gt;&gt;&gt; 30 / 2 # 除法（结果为浮点数）15.0&gt;&gt;&gt; 3 // 2 # 除法（丢弃小数部分）1&gt;&gt;&gt; 3 ** 2 # 乘方9&gt;&gt;&gt; 10 % 3 # 求余（取模）（即小数部分）1&gt;&gt;&gt; 2 + 3 * 4 # 运算次序14&gt;&gt;&gt; ( 2 + 3 ) * 4 # 运算次序（优先级）20 - 1.2.3 浮点数Python 将带小数点的数字都称为浮点数，对应数学中的实数（real）： 1234&gt;&gt;&gt; 0.1 + 0.1 # 浮点数加法。当然，整数位 为 0 时，可以简写成 .1 + .1 ;0.2&gt;&gt;&gt; 2 * 0.2 # 整数与浮点数的乘法0.4 值得注意的是，结果包含的小数位可能是不确定的（这是由于计算机内存中存储浮点数的位数有限），暂时忽略多余的小数点即可; 1234&gt;&gt;&gt; 0.1 + 0.20.30000000000000004&gt;&gt;&gt; 0.2 * 0.20.04000000000000001 - 1.2.4 复数复数（Complex）由实部和虚部组成，把实数扩展到了虚数（imaginary），数学表示形式为 a+bj（a为实部、b为虚部） 123456789&gt;&gt;&gt; (1-3j) # Python语言中的复数表示(1-3j)&gt;&gt;&gt; (1-3j)*(2-4j) # 复数的乘法(-10-10j)&gt;&gt;&gt; # 复数的实部和虚部可以通过以下方法来检索确认&gt;&gt;&gt; (1-3j).real # 检测复数的实部1.0&gt;&gt;&gt; (1-3j).imag # 检测复数的虚部-3.0 - 1.2.5 布尔布尔（Boolean）又称逻辑。在Python中用 True、False 表示，用于逻辑判断。该数据时一种特殊的整数类，True可以用1替换代表“真”；False可以用0替换代表“假” 123456789&gt;&gt;&gt; True # 首字母必须大写，否则出错True&gt;&gt;&gt; # 布尔的逻辑运算方式（与、或、非），与数学完全一致&gt;&gt;&gt; True and TrueTrue&gt;&gt;&gt; True or FalseTrue&gt;&gt;&gt; not FalseTrue - 1.2.6 二进制、八进制和十六进制二进制 binary、八进制 Octal、十六进制 Hexadecimal 分别以下面的方式表示，这些表示都以 0 开头： 123456&gt;&gt;&gt; 0b1011010010722&gt;&gt;&gt; 0o108&gt;&gt;&gt; 0xFF # 大小写都可以255 - 1.2.7 其他运算符 二进制位运算、比较运算符、赋值运算符等将在探索中记录。 - 1.3 字符串- 1.3.1 基本字符串字符串就是一系列字符。在Python中，用引号括起来的都是字符串，其中的引号可以是 单引号 或 双引号： 12&quot;This is a string.&quot;&#x27;This is also a string.&#x27; 这样我们可以在写字符串的时候可以更加灵活地使用引号和撇号了; - 1.3.2 对引号转义如果不使用上述地两种引号，可以使用反斜杠 \\ 对引号进行转义; 12&gt;&gt;&gt; &#x27;let\\&#x27;s go!&#x27; # 输入&quot;let&#x27;s go!&quot; # 结果 - 1.3.3 拼接字符串Python 支持字符串的拼接; 1234&gt;&gt;&gt; x = &quot;Hello,&quot;&gt;&gt;&gt; y = &#x27;world.&#x27;&gt;&gt;&gt; x + y&#x27;Hello,world.&#x27; 对数字进行拼接的时候注意使用函数 str() 避免错误。具体在 函数 部分记录。 123visit = 18message = &quot;Hello, the &quot; + str(visit) + &quot;rd visitor!&quot;print(message) 输出结果： 1&#39;Hello, the 18rd visitor!&#39; - 1.3.4 其他 str()、repr()、长字符串、原始字符串、字节、Unicode编码等将在探索中记录。 - 1.4 注释每款编程语言都拥有注释方式，注释让编程者能够使用自然语言在程序中添加说明，Python中注释有三种方法： 123456789print(&quot;Hello Python!&quot;) # 这是一句输出#这是单行注释&#x27;&#x27;&#x27;多行注释多行注释&#x27;&#x27;&#x27;&quot;&quot;&quot;这也是多行注释这也是多行注释&quot;&quot;&quot; 小结 &amp;&amp; 后记本节记录了 Python3 的安装方法、数字、变量、语句、字符串基础以及注释的使用方法。 我这个学网络为什么要折腾自己学个 Python??? Update 2020/3/26 ：修改了一些不太正确的理解，添加了好多内容让博文变得好长。","categories":[{"name":"Python学习笔记","slug":"Python学习笔记","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础学习","slug":"Python学习笔记/基础学习","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.idealx.cn/tags/python/"},{"name":"语言基础","slug":"语言基础","permalink":"http://www.idealx.cn/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"}]},{"title":"Re:从零开始让CMD控制台优雅一点点","slug":"04-cmd-easy-beautify","date":"2020-03-12T00:30:00.000Z","updated":"2020-03-12T01:30:00.000Z","comments":true,"path":"/post/cmd-easy-beautify.html","link":"","permalink":"http://www.idealx.cn/post/cmd-easy-beautify.html","excerpt":"","text":"这是一款相当漂亮且适合编程的字体。他们是这么说的…这是一款 Microsoft Yahei 和 Consolas 的混合字体，很适合在 Windows 和 Linux 平台下编程使用。字体名字叫 YaHei-Consolas-Hybrid。 Microsoft Yahei ：微软雅黑是美国微软公司委托中国北大方正电子有限公司设计的一款全面支持ClearType技术的字体。别商用，惨不忍睹 Consolas ：Consolas是一套等宽字体的字型，属无衬线字体，由Lucas de Groot设计。 下面提供 Github 中的下载地址：https://github.com/yakumioto/YaHei-Consolas-Hybrid-1.12 Windows 系统可以直接下载 .ttf 的字体文件，然后点击安装即可。 Linux 内核的系统按照上述网站中的简介安装即可。 还有一款非常标准而且好看的字体叫 “更纱黑体” ，不过最近似乎有新版本的修正，下次再存档记录吧。 修改CMD命令提示符的默认字体方法一：配置注册表1、在键盘上敲击 Windows + R 键，输入 regedit 命令打开注册表 2、在左侧的文件夹中找到 HKET_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Console\\TrueTypeFont 设置： “936” = “YaHei Consolas Hybrid” 方法二：右击CMD窗口“属性“和”默认值“ 在字体里选择 YaHei Consolas Hybrid 即可。 特别注意：”默认值“ 为 cmd.exe 的默认值，“属性” 为当前 cmd 的快捷方式的设置（比如说用口令打开的cmd快捷方式或者 “开始” 菜单中的 “cmd命令指令符” 就是两个 cmd.exe 的快捷方式 ）。 接着，可以根据自己的需求选择更改一些背景的属性。（当然我懒就没改） 然后，然后 CMD 就会好看一点了。（不得不说这个等宽字体是真的养眼） 后记下次会介绍一些更好看的 “终端” 程序。也便于自己做个存档。如果有机会的话，下次会直接在博客中给一些下载链接的吧。两天更一篇博文就是水。","categories":[{"name":"笔记本","slug":"笔记本","permalink":"http://www.idealx.cn/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"},{"name":"教程","slug":"笔记本/教程","permalink":"http://www.idealx.cn/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"正经","slug":"正经","permalink":"http://www.idealx.cn/tags/%E6%AD%A3%E7%BB%8F/"},{"name":"科学","slug":"科学","permalink":"http://www.idealx.cn/tags/%E7%A7%91%E5%AD%A6/"},{"name":"教程","slug":"教程","permalink":"http://www.idealx.cn/tags/%E6%95%99%E7%A8%8B/"},{"name":"CMD","slug":"CMD","permalink":"http://www.idealx.cn/tags/CMD/"},{"name":"终端","slug":"终端","permalink":"http://www.idealx.cn/tags/%E7%BB%88%E7%AB%AF/"},{"name":"美化","slug":"美化","permalink":"http://www.idealx.cn/tags/%E7%BE%8E%E5%8C%96/"}]},{"title":"Re:从零开始优雅地挂网课","slug":"03-tampermonkey","date":"2020-03-10T02:30:00.000Z","updated":"2020-03-18T10:26:52.000Z","comments":true,"path":"/post/tampermonkey.html","link":"","permalink":"http://www.idealx.cn/post/tampermonkey.html","excerpt":"","text":"这是一篇傻瓜教程，大家按需求食用即可。 以后再也别说我开挂了！本篇文章是整理 Tampermonkey 脚本管理器的安装方法。 什么是 脚本 ？ 脚本（Script）是一种批处理文件的延伸，是一种纯文本保存的程序，一般来说的计算机脚本程序是确定的一系列控制计算机进行运算操作动作的组合，在其中可以实现一定的逻辑分支等。 —-百度百科=脚本 脚本语言（Scripting language）是为了缩短传统的“编写、编译、链接、运行”（edit-compile-link-run）过程而创建的计算机编程语言。早期的脚本语言经常被称为批处理语言或工作控制语言。一个脚本通常是解释运行而非编译。脚本语言通常都有简单、易学、易用的特性，目的就是希望能让程序员快速完成程序的编写工作。 —-维基百科=脚本语言 JavaScript 和 Python 等都是常见的脚本语言。 Tampermonkey 是什么？Tampermonkey 是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于 Chrome, Microsoft Edge, Safari, Opera Next, 和 Firefox。 并且，你可以自己编写自己的脚本。它提供了很多功能，详情参照它的官方文档。 Tampermonkey 在 Chromium 内核的兼容性非常好，这意味着绝大部分国产浏览器都可以安装。 它甚至支持 Android 浏览器。 简单来说，Tampermonkey 可以让我们便捷地使用全世界数以百万计的脚本。接下来介绍两种非常简单的安装方式。 安装方式一：官方网站直接安装 提示：本方法需要科学上网/魔法上网。其实从这一步也会跳转到第二种方式，只是担心下载链接的失效（Edge 的就失效了）。 1、打开 Tampermonkey 的官网：http://www.tampermonkey.net/ 2、选择你的浏览器，单击下载，按照正常浏览器插件安装流程就可以了。 安装方式二：通过浏览器商店1、选择一款支持插件的浏览器，此处以 Chromium 内核的 Microsoft Edge 80 为例。 如果用 Chrome 也是一样的道理，但是需要魔法。 2、打开浏览器的 “拓展” 界面 单击 “从 Microsoft Store 获取拓展”，进入微软的插件商店。 当然你可以下载 crx ，然后使用开发人员模式安装。 3、搜索“Tempermonkey”，找到正版的插件，单击“获取”。然后按照插件安装流程，单击弹出的“添加插件”。 4、然后就安装好了。 就是这么快，但是就是要水字数。 用它！单击浏览器右上部它的猴图标。 单击 “获取新脚本” 。 获取新脚本：用别人的 添加新脚本：自己写 然后选择一个脚本提供商。（建议 GreasyFork ） 打开之后按照脚本提供商的文档操作，搜索+安装+使用，就不多说了。 你可以随时在 Tampermonkey 脚本管理器中修改所有下载的脚本以适合自己使用。并且可以随时关闭使用的脚本以在特定时间使用。 后记博客不过是整理分类自己学到的东西，杂货铺实锤。 大家按需求食用即可。 封面图片取自互联网。","categories":[{"name":"笔记本","slug":"笔记本","permalink":"http://www.idealx.cn/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"},{"name":"教程","slug":"笔记本/教程","permalink":"http://www.idealx.cn/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"正经","slug":"正经","permalink":"http://www.idealx.cn/tags/%E6%AD%A3%E7%BB%8F/"},{"name":"科学","slug":"科学","permalink":"http://www.idealx.cn/tags/%E7%A7%91%E5%AD%A6/"},{"name":"教程","slug":"教程","permalink":"http://www.idealx.cn/tags/%E6%95%99%E7%A8%8B/"},{"name":"脚本","slug":"脚本","permalink":"http://www.idealx.cn/tags/%E8%84%9A%E6%9C%AC/"},{"name":"Tampermonkey","slug":"Tampermonkey","permalink":"http://www.idealx.cn/tags/Tampermonkey/"}]},{"title":"Re:从零搭建Hexo博客并部署到GitHub或云服务器上","slug":"02-hexo-basic","date":"2020-02-23T03:00:00.000Z","updated":"2020-02-23T15:10:00.000Z","comments":true,"path":"/post/hexo-basic.html","link":"","permalink":"http://www.idealx.cn/post/hexo-basic.html","excerpt":"","text":"前言心血来潮买了云主机，浪费了几个月都没用，然后就学着搭建博客，对比了一下 WordPress 和 Hexo 之后，随性选择了以 Hexo 为框架搭建博客平台。经过了几次的从零开始，遇到了各种各样的问题之后才成功地搭建好了。我将自己在搭建博客的过程中遇到的一些问题做汇总和记录来帮助自己回顾，也希望对有想法要搭建自己的博客的同学们有一些帮助。 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown 解析文章，在几秒内，即可利用靓丽的主题生成静态网页。通过 Hexo 的官方网站 https://hexo.io/ 了解更多关于这个博客框架，它拥有中文文档。 主要目录 前言 本地主机的 Hexo 安装操作（以Windows系统为例） Hexo 基本操作 部署到GitHub 部署云服务器（以CentOS服务器为例） 完成部署 常见问题 后记 本地主机的 Hexo 安装操作本地主机以 Windows 10 系统为例。（ 本地主机 下文均称 本地PC ）苹果电脑的 macOS 可以自行使用搜索引擎，安装 Node.js 有很多种方式。 1、安装 Node.js® Node.js是一个基于 Chrome V8 引擎的 JavaScript 运行环境，是一个让 JavaScript 运行在服务端的开发平台。 Node.js 的官方下载地址：https://nodejs.org/ 当然它也有中文网：http://nodejs.cn/ 建议下载LTS（即Long Term Support，长期技术支持）（此处是64位版本的，其他版本如源码可以在DOWNLOAD界面找到），较为稳定，下载的文件名为：node-v12.16.1-x64.msi ，安装过程基本直接下一步即可。安装完成后使用命令提示符（以下均简写cmd）查看是否安装成功。 node -v 和 npm -v 出现安装的版本号说明安装成功。 2、安装 Git Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 Git Bash 可以便捷后面的操作。 Git Bash 和 CMD 的区别：Bash是基于CMD的，Bash在CMD的基础上新增了一些命令和功能，故建议使用Bash更方便。 官方网站：https://git-scm.com/ 选择Windows版本安装。按照官方文档推荐中国大陆用户从 淘宝 Git for Windows 镜像 下载 Git（说得对）。macOS 和 Linux 系统都有自带的 Terminal 终端方便下载 Git 。 3、安装 HexoHexo 的官方网站：https://hexo.io/ 该博客框架拥有中文文档，有些资料需要参考文档。由于 npm 服务器在国外，因此使用 npm 直接下载可能会遇到卡顿的问题，所以我们先将 npm 转换成淘宝的源。在 cmd 或 Git Bush 中输入命令： 1npm config set npm config set registry https://registry.npm.taobao.org 然后安装 cnpm ： 1npm install -g cnpm --registry=https://registry.npm.taobao.org 然后安装 Hexo ： 1cnpm install -g hexo-cli 等待安装结束。选择一个目录来初始化博客：（例如 E:/blog） 123456789101112# 如果在图形界面中创建过文件夹，可直接进入cd e:/bloghexo init# 如果没有创建文件夹cd e:/mkdir blogcd bloghexo init# 或者按照官方文档的安装方法cd e:/hexo init blogcd blog 执行成功后安装两个插件： 1234npm install hexo-deployer-git --savenpm install hexo-server# 或者按照官方文档 直接npm install 然后就可以在本机查看自己的博客了 1hexo s 打开浏览器输入localhost:4000可以看到初始界面。按 Ctrl+C 关闭本地服务器。本地初始化完成，接下来在部署环节介绍。注意：部署到 GitHub 或者 云服务器 ，选一种就可以了，也可以自己拓展，以下给出参考操作步骤。 Hexo 的基本操作本节可以参考官方文档，以下仅给出部分示例，这些命令都在 本地PC 上运行。 1、创建新的文章创建一篇名为《Hello》的文章 1hexo new &quot;Hello&quot; 在 source/_posts会出现一个 MarkDown 文件 Hello.md ，可以使用任意一种MD编辑器编写（当然TXT编辑器也可哈如果你愿意的话）。 2、清除缓存1hexo clean 清除缓存文件（db.json）和已生成的静态文件（public）。 3、生成静态文件1hexo generate 生成静态文件 （public）。可以简写为： 1hexo g 4、启动服务器1hexo server 启动服务器，默认情况下为 localhost:4000。如果想在其他端口运行，需要端口号，例如想在 4001 端口上运行： 1hexo server -p 4001 以上命令中的 server 可以简写为 s。 5、部署服务器在之后部署的时候会用到。 123hexo deploy# 可以简写为hexo d 6、其他使用频率高的命令12345# 显示 Hexo 版本hexo version# 列出网站的资料hexo list &lt;type&gt;hexo list post # 例如显示博文列表 部署到GitHub1、准备工作 提示：没有 GitHub 的同学可以直接创建一个哈！ 打开 GitHub ，点击 new 一个repository，创建一个新的仓库，仓库名称必须要遵守 GitHub Pages 的格式： 用户名.github.io ，否则会出问题，并且勾选 Initialize this repository with a README ，如下图所示。 建好仓库后，在 Settings 设置中有一个 GitHub Pages 一项，里面就写着 GitHub Pages 为我们创建好的域名。在浏览器中访问就可以看到一个初始的界面。这就是博客的默认地址，当然后面我们也可换成自己的域名。 2、设置 SSH务必确保在 本地PC 已经完成了Node.js、Git 和 Hexo 的安装，打开 Git Bash ，如果是第一次使使用 Git 的话： 123# 以下 user.name 和 user.email 输入自己的，示例：git config --global user.name &quot;ideallove&quot;git config --global user.email ideallove@example.com 使用 ssh-keygen 生成私钥和公钥： 1ssh-keygen -t rsa 可以一路回车键 找到你的密钥 id_rsa 和公钥 id_rsa.pub 的位置。接着在 GitHub 头像下的 Settings 里找到添加 SSH key，点击New SSH key 。 将刚刚生成的公钥 id_rsa.pub 文件里的内容复制到 Key 里面（用 记事本 打开公钥文件，这里 Office 还提示我说是 publish 文件，2333XD），然后选择添加，GitHub 会提示输入密码确认。接着在 本地PC 的 bash 上输入： 1ssh -T git@github.com 第一次的时候依旧会让你 yes 确认 ，如果看到 Hi 后面是自己的用户名，就说明成功了。（当然，GitHub 不提供 shell 的连接） 3、在本地PC上完成推送部署接下来回到我们的 PC 上，在刚刚我们生成的 e:/blog 目录下，找到 hexo 的配置文件 _config.yml ，使用各种好用的编辑器打开它（意思就是 TXT 编辑器也可，我用的是 Notepad++）。在最下面有个 deploy 的配置，在那里修改为自己的 ID，示例： 1234deploy: type: git repo: git@github.com:ideallove/ideallove.github.io.git branch: master 提示：缩进一定不能出问题。 保存并退出，然后发布到 GitHub 上。 1234hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy# 当然也可简写成hexo clean &amp;&amp; hexo g &amp;&amp; hexo d# 这里，不一定每次都要 clean，clean 会清除缓存，导致一些计数脚本清零。 然后我们就可以在 本地PC 浏览器上输入 GitHub Pages 的域名 https://自己的用户名.github.io 访问我们的博客了。 更换为自己的域名，则为后话了。部署到 GitHub 或者 云服务器 ，选一种就可以了。 部署到云服务器1、购买云服务器和域名购买任意服务器（例如阿里云ECS、阿里云轻量应用服务器、腾讯云CVM、百度云BCC等）和域名。 提示：如果使用国内的域名在国内的服务器部署网站需要进行备案，可以使用搜索引擎进行资料的查找。 2、选择服务器镜像类型建议使用Linux系统的服务器镜像。（Windows也可，这里以阿里云服务器CentOS为例）首先进入服务器的管理界面，找到*安全**选项中的防火墙*（可能有一些服务商写的类似的**安全组），确认应用类型 HTTP 协议 TCP 端口 80 是否设置打开，类似下图所示： 确认打开之后进行下一步，可以先配置Git库也可先进行服务器环境的搭建。 3、服务器环境 nginx 搭建使用云服务商提供的远程登陆登录进云服务器，可以现在服务商设置中设置 root 用户的密码以提高安全性。以阿里云为例，输入 sudo su root 进入 root 用户，这里我建议使用 nginx 作为服务器环境。 Nginx 是一款轻量级的 Web 服务器 / 反向代理服务器及电子邮件代理服务器，在 BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上 nginx 的并发能力在同类型的网页服务器中表现较好，中国大陆使用 nginx 网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。—节选自百度百科 首先，**安装 nginx **，在控制台中执行如下命令： 1yum install -y nginx 等待下载安装，很快将会显示 Complete! 。安装结束后使用如下命令开启环境： 1nginx 现在，尝试使用自己的个人电脑(PC)**上使用浏览器输入云服务器的公网IP**，就会显示如下界面： 恭喜你已经打开了新世界的大门。这是nginx的默认网页，以上界面是CentOS版本的，其他服务器会有所不同，但这表示我们已经成功了第一步。实际上我们需要将这个地址指向我们的博客，接下来我们去修改nginx的配置文件。在那之前可以先关闭 nginx （当然也可以不关）： 1234# 快速关闭nginx -s stop# 有序而完整地关闭nginx -s quit 提示：在修改 nginx 的配置文件的时候查阅了相关的资料，阿里云默认库下载的 fedora 版本的 nginx 的文件结构中，配置文件是位于 /etc/nginx 下的 nginx.conf ，有些服务器可能是 /etc/nginx/conf.d/default.conf ，而按照官方的安装方法则可能是 /etc/nginx/conf/nginx.conf 。 对于新手来说不一定要使用 include 的方法，直接修改 nginx.conf 比较快捷。执行如下命令： 1234# 进入路径cd /etc/nginx# 使用vim编辑器编辑配置文件vi nginx.conf 接下来是vim编辑器的使用（可以使用搜索引擎辅助，查找vim的相关使用命令），在键盘上输入 i 进入 insert 模式，并进行如下修改：（1）将最上一行的 user 改为 root（或者创建名为nginx的用户并给予权限）（2）向下寻找，在 http 中更改 root 指向的路径，比如我这里选择 /home/www/website ，当然此时我们还没有创建这个文件夹。（3）同时如果有了域名的话可以在 server_name 写上域名。 编辑结束之后，按 esc 键，然后输入 :wq 并敲回车键退出vim编辑器并保存文件。接着在我们刚刚 nginx.conf配置文件中写的地址创建对应的文件夹（当然也可先创建再修改配置文件，只要没启动都是一样的。） 1234cd ~/homemkdir wwwcd /wwwmkdir website 这样我们就得到了博客的根路径 /home/www/website （当然也可设置其他路径）并且与 nginx.conf 文件对应。 4、安装 Node.js 和 Git（1）安装 Node.js 在 Linux 系统上安装 Node.js 的方法有很多种，详细可以参考搜索引擎或者 Node.js 的GitHub文件。这里使用一种方法： 123curl -sL https://rpm.nodesource.com/setup_13.x | bash -# 这里的setup_13.x指Node.js13的版本，可以改为其他版本，建议不要太低为好，hexo一些主题的Node.js版本都比较高。yum install -y nodejs 在安装过程中可能会发生下载速度极慢的情况，具体取决于云服务器选择的源。安装完成之后像我们PC上一样执行一下版本号命令： 12node -vnpm -v 如果成功打印版本号则说明安装成功。 （2）安装 Git 以及配置仓库 主要是让我们的PC可以通过ssh的方式连接到云服务器，然后我们可以通过 deploy 的方式将我们的博客推到服务器上，在控制台中输入如下命令：安装 Git ： 1yum install git 安装结束后配置 git 用户： 1adduser git 修改用户的权限： 12chmod 740 /etc/sudoersvi /etc/sudoers 在 sudoers 文件中找到这段话并添加进去，同样是vim编辑器的操作。 编辑结束之后，按 esc 键，然后输入 :wq 并敲回车键退出vim编辑器并保存文件。保存退出后将 sudoers 文件的权限改回来： 1chmod 400 /etc/sudoers 并设置 git 用户的密码： 12sudo password git# 这里会让输入密码，然后确认密码，如果密码太简单的话它会嫌弃并说密码是&quot;Bad Password&quot;（并不影响使用） 切换到 git 用户，并创建 .ssh 文件夹和公钥密钥文件 1234567891011# 切换到 git 用户su gitcd ~mkdir .ssh &amp;&amp; cd .ssh# 生成公钥和密钥文件ssh-keygen# 然后一路 enter 键即可，此时在目录下有两个文件，密钥 id_rsa 和公钥 id_rsa.pub ，接下来复制一份公钥cp id_rsa.pub anthorized_keys# 然后修改它的权限chmod 600 ~/.ssh/authorized_keyschmod 700 ~/.ssh 接下来在我们自己的 本地PC 上，打开 cmd 或者 bash ，尝试使用 ssh 方式连接到我们的云服务器。 1ssh -v git@云服务器的公网IP地址 提示：在第一次登录的时候，服务器会让你确认是否连接，输入 yes 进入下一步，然后服务器会让你输入 git 用户的密码，输完密码后回车键就可以进入了。 当然这里也可以用其他方法，让服务器与 PC 建立 ssh 信任关系，这样就不需要输入密码了。 如果为了安全起见，还可以将 git 用户的 shell 登录权限禁用。 出现 Welcome to Alibaba Cloud Elastic Compute Service ! 或其他服务器有类似的语句（或者直接出现 git 用户的命令），就说明登录成功了。接下来我们要创建一个新的 git 仓库，并且新建一个 post-update 文件（有些 git 版本可能是 post-receive ，注意分辨即可）。 123cd ~git init --bare blog.gitvi ~/home/git/blog.git/hooks/post-update 提示：在初始化 init 之后可以 cd ~/home/git/blog.git/hooks/ 然后使用 ls -a 来展示文件夹下的全部文件，如果出现了 post-update.sample ，则可以选择更改文件名来使它有作用，也可新建。 vim 编辑器下在键盘上输入 i 进入 insert 模式，并输入以下内容： 1git --work-tree=/home/www/website --git-dir=/home/git/blog.git checkout -f 编辑结束之后，按 esc 键，然后输入 :wq 并敲回车键退出vim编辑器并保存文件。添加完毕后修改权限： 123chmod +x ~/home/git/blog.git/hooks/post-updateexit # 退出到 root 登录chown -R git:git /home/git/blog.git # 添加权限 这样我们就完成了服务器端的操作。 5、在本地PC上完成推送部署接下来回到我们的 本地PC 上，在刚刚我们生成的 e:/blog 目录下，找到 hexo 的配置文件 _config.yml ，使用各种好用的编辑器打开它（意思就是 TXT 编辑器也可，我用的是 Notepad++）。在最下面有个 deploy 的配置，在那里修改： 12345deploy: type: git repo: git@云服务器的公网IP:/home/git/blog.git branch: master message: 提示：缩进一定不能出问题。如果域名已经能正常解析云服务器的IP，也可以在输入IP的地方换成域名。 保存并退出，然后发布到服务器上。 1234hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy# 当然也可简写成hexo clean &amp;&amp; hexo g &amp;&amp; hexo d# 这里，不一定每次都要 clean，clean 会清除缓存，导致一些计数脚本清零。 接着我们在 服务器控制台 上重新运行 nginx 服务器： 1nginx 然后我们就可以在 本地主机 浏览器上输入域名或者公网IP访问我们的博客了。 完成部署以上两种方法选择一种即可，完成部署以后可以仔细修改 _config.yml 的配置文件，并且修改自己的博客主题，美化一下。 常见问题如果在本教程过程中出现问题，可以在下方评论（如果评论板搭建好了的话……）或者mail给我。 Q：部署到云服务器，出现了 403 界面怎么办？ A： 403 为禁止访问，nginx 服务器没有获得你的路径的读取的权限，检查是否给予了 post-update 权限 chmod +x ~/home/git/blog.git/hooks/post-update。如果还不行可以尝试使用 chmod -R 777 /home/www/website （当然 777 要慎用玩LOL的时候也是）。 参考资料链接 Node.js 中文网 Hexo 中文文档 Nginx 中文文档 Nginx 安装配置 从零搭建Hexo博客并部署阿里云服务器 带你跳过各种坑，一次性把 Hexo 博客部署到自己的服务器 通过Git将Hexo博客部署到服务器 使用hexo搭建github博客 后记除了感觉自己写的太长之外没什么想说的，本身想把这个博客变成技术博客我觉得我太天真了。大胆预言一波我的博客绝对会变成杂货铺的…… 另附CSDN地址：https://blog.csdn.net/qq_43187818/article/details/104468721","categories":[{"name":"笔记本","slug":"笔记本","permalink":"http://www.idealx.cn/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"},{"name":"教程","slug":"笔记本/教程","permalink":"http://www.idealx.cn/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"正经","slug":"正经","permalink":"http://www.idealx.cn/tags/%E6%AD%A3%E7%BB%8F/"},{"name":"科学","slug":"科学","permalink":"http://www.idealx.cn/tags/%E7%A7%91%E5%AD%A6/"},{"name":"教程","slug":"教程","permalink":"http://www.idealx.cn/tags/%E6%95%99%E7%A8%8B/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.idealx.cn/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://www.idealx.cn/tags/GitHub/"},{"name":"云","slug":"云","permalink":"http://www.idealx.cn/tags/%E4%BA%91/"},{"name":"博客","slug":"博客","permalink":"http://www.idealx.cn/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"Re:从零开始的博客生活","slug":"01-hello-world","date":"2020-02-19T15:00:00.000Z","updated":"2020-03-18T10:18:38.000Z","comments":true,"path":"/notice/hello-hexo.html","link":"","permalink":"http://www.idealx.cn/notice/hello-hexo.html","excerpt":"","text":"序章并不知道从哪里说起要说从哪里开始，可能是 “Hello,World!” 吧？大部分的基础程序教学，都是以输出这句话开始的。（当然也见过例外） 大家都说，程序员都应该有自己的博客。我不以为意，毕竟我现在不是程序员。但是作为一个计算机爱好者，有个博客记录生活和学习并不是一件坏事。博客也不是炫技的地方，坚持一个博客是真的非常不简单的，它是为了记录自己的生活而存在的… 但是当真正抓起键盘想要写一些东西的时候，就不太写的出来了。唐代诗人杜甫曾经写道 “读书破万卷，下笔如有神。” 读书读得多才能写出好文章，也许这是真谛。生活越来越忙碌，没有时间读一些好书。希望我能多读一些好书，写一些有趣的文章。希望在这个博客里，能给大家分享一些我喜欢的东西，上到天文下到地理。我虽然是计算机爱好者，但同时也是一个重度的二次元爱好者。大概博客的内容会很跳跃吧哈哈哈。 何为博客，为什么选它 博客，仅音译，英文名为Blogger，为Web Log的混成词。它的正式名称为网络日记。 以上是选自百度百科的介绍。博客在21世纪最初的10年是非常红火的。后来被更加快捷的方式给击败了。但是它并没有全部地被击败，至少在我们计算机领域，博客都是非常精彩的。 我之所以没有选择程序员们用的博客，或者是大型企业提供的博客，大概是因为我希望有一些自由度吧。（不如说是喜欢折腾）也有可能是我担心我想分享的废话比正式的文章还要多许多吧？ 我是个非常胆小的人，或者说，对于有些事情太过于谨慎了。错过了很多机会。但生活还要继续。 至少我迈出了第一步。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://www.idealx.cn/categories/%E9%9A%8F%E7%AC%94/"},{"name":"日记","slug":"随笔/日记","permalink":"http://www.idealx.cn/categories/%E9%9A%8F%E7%AC%94/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"不正经","slug":"不正经","permalink":"http://www.idealx.cn/tags/%E4%B8%8D%E6%AD%A3%E7%BB%8F/"},{"name":"杂谈","slug":"杂谈","permalink":"http://www.idealx.cn/tags/%E6%9D%82%E8%B0%88/"}]}],"categories":[{"name":"网络","slug":"网络","permalink":"http://www.idealx.cn/categories/%E7%BD%91%E7%BB%9C/"},{"name":"基础学习","slug":"网络/基础学习","permalink":"http://www.idealx.cn/categories/%E7%BD%91%E7%BB%9C/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"},{"name":"Python学习笔记","slug":"Python学习笔记","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"基础学习","slug":"Python学习笔记/基础学习","permalink":"http://www.idealx.cn/categories/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"},{"name":"笔记本","slug":"笔记本","permalink":"http://www.idealx.cn/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/"},{"name":"教程","slug":"笔记本/教程","permalink":"http://www.idealx.cn/categories/%E7%AC%94%E8%AE%B0%E6%9C%AC/%E6%95%99%E7%A8%8B/"},{"name":"随笔","slug":"随笔","permalink":"http://www.idealx.cn/categories/%E9%9A%8F%E7%AC%94/"},{"name":"日记","slug":"随笔/日记","permalink":"http://www.idealx.cn/categories/%E9%9A%8F%E7%AC%94/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"思科模拟器","slug":"思科模拟器","permalink":"http://www.idealx.cn/tags/%E6%80%9D%E7%A7%91%E6%A8%A1%E6%8B%9F%E5%99%A8/"},{"name":"cisco","slug":"cisco","permalink":"http://www.idealx.cn/tags/cisco/"},{"name":"网络基础","slug":"网络基础","permalink":"http://www.idealx.cn/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"},{"name":"python","slug":"python","permalink":"http://www.idealx.cn/tags/python/"},{"name":"语言基础","slug":"语言基础","permalink":"http://www.idealx.cn/tags/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"},{"name":"正经","slug":"正经","permalink":"http://www.idealx.cn/tags/%E6%AD%A3%E7%BB%8F/"},{"name":"科学","slug":"科学","permalink":"http://www.idealx.cn/tags/%E7%A7%91%E5%AD%A6/"},{"name":"教程","slug":"教程","permalink":"http://www.idealx.cn/tags/%E6%95%99%E7%A8%8B/"},{"name":"CMD","slug":"CMD","permalink":"http://www.idealx.cn/tags/CMD/"},{"name":"终端","slug":"终端","permalink":"http://www.idealx.cn/tags/%E7%BB%88%E7%AB%AF/"},{"name":"美化","slug":"美化","permalink":"http://www.idealx.cn/tags/%E7%BE%8E%E5%8C%96/"},{"name":"脚本","slug":"脚本","permalink":"http://www.idealx.cn/tags/%E8%84%9A%E6%9C%AC/"},{"name":"Tampermonkey","slug":"Tampermonkey","permalink":"http://www.idealx.cn/tags/Tampermonkey/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.idealx.cn/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://www.idealx.cn/tags/GitHub/"},{"name":"云","slug":"云","permalink":"http://www.idealx.cn/tags/%E4%BA%91/"},{"name":"博客","slug":"博客","permalink":"http://www.idealx.cn/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"不正经","slug":"不正经","permalink":"http://www.idealx.cn/tags/%E4%B8%8D%E6%AD%A3%E7%BB%8F/"},{"name":"杂谈","slug":"杂谈","permalink":"http://www.idealx.cn/tags/%E6%9D%82%E8%B0%88/"}]}